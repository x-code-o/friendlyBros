
     <!doctype html>
<html lang="en" class="h-100">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Hugo 0.98.0">
    <title>User Authentication</title>
    <link rel="canonical" href="https://getbootstrap.com/docs/5.2/examples/cover/">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
      body {
        background: url(https://res.cloudinary.com/dsjt220g8/image/upload/v1731417821/newbaack_tnvhei.jpg);
        background-repeat: no-repeat;
        background-size: cover;
      }
      .center-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
      }
      .form-container {
        background: rgba(255, 255, 255, 0.8);
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 500px;
        height: 100vh;
        overflow-y: auto; /* Enable vertical scrolling */
      }
      .form-container h1 {
        font-size: 2rem;
        margin-bottom: 1rem;
        text-align: center;
        color: black;
      }
      .form-container input,
      .form-container textarea,
      .form-container button,
      .form-container select {
        width: 100%;
        margin-bottom: 1rem;
        padding: 0.75rem;
        font-size: 1rem;
        border-radius: 5px;
        border: 1px solid #ddd;
      }
      .form-container button {
        background-color: #000;
        color: #fff;
        border: none;
        cursor: pointer;
      }
      .form-container button:hover {
        background-color: #444;
      }

      /* Optional custom style for dropdown to match other inputs */
      .form-container select {
        padding: 0.75rem; /* Matches the inputs */
        font-size: 1rem; /* Matches the inputs */
        border-radius: 5px; /* Matches the inputs */
        border: 1px solid #ddd; /* Matches the inputs */
      }

      .form-container input[type="file"] {
        color: black; /* Set the file input text color to black */
      }

      .logout-button {
        position: absolute;
        top: 1rem;
        right: 1rem;
      }
      .username {
        position: absolute;
        top: 1rem;
        left: 1rem;
        font-size: 1.25rem;
        color: black;
        font-weight: bold;
      }

      /* Preview styles */
      .media-preview {
        margin-top: 1rem;
        text-align: center;
      }
      audio {
        width: 100%;
      }

      /* Card styles */
      .card-custom {
  margin-bottom: 1rem;
  border: 2px solid black; /* Add black border */
}

      .card-custom input[type="radio"] {
  margin-right: 5px;
  width: 17px; /* Set the width of the radio button */
  height: 17px; /* Set the height of the radio button */
}


.card-custom label {
  color: #000; /* Set labels to black */
  font-weight: 500; /* Optional: Slightly bold for better visibility */
}

.card-custom .radio-group {
  display: flex; /* Align radio buttons and labels */
  flex-direction: column; /* Stack them vertically */
  align-items: flex-start; /* Align to the left */
  gap: 10px; /* Add space between radio options */
}

      /* Card title color */
      .card-title {
        color: black; /* Set card titles to black */
      }
      .card-text {
        color: black; /* Set card titles to black */
      }

    /* Styling for circular buttons */
    /* Ensure the circular buttons take precedence over Bootstrap styles */
.btn-circle {
  border-radius: 50%;
  width: 60px;
  height: 60px;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0;
  font-size: 1.5rem;
  line-height: 0; /* Remove any potential line-height that might disrupt the circle */
  text-align: center;
  overflow: hidden; /* Hide any overflow that doesn't fit within the circle */
}

/* Optional: Adjust size for icon to ensure it's centered and fits well */
.btn-circle i {
  font-size: 1.5rem;
}

/* Prevent Bootstrap's default .btn classes from interfering */
.btn.btn-primary, .btn.btn-warning, .btn.btn-success, .btn.btn-danger {
  padding: 0; /* Remove padding to maintain the circle */
  height: 60px;
  width: 60px;
}


    #status-message {
    color: black;
    font-weight: bold;
    }

    #recording-status {
  color: black;
  font-weight: bold;
  margin-top: 10px;
  background-color: rgb(253, 253, 245); /* Temporary background to debug visibility */
  padding: 5px;
  font-size: 1.2rem; /* Adjust font size to make it easier to see */
}


    /* Increase the width of the "Record Again" button */
    #re-record {
    width: 100%;
    margin-top: 10px;
    }

    /* Margin between pause/resume and stop buttons */
#pause-recording, #resume-recording, #stop-recording {
  margin-right: 10px; /* Add space between buttons */
}

    /* Optional: Hover effect for the circular buttons */
    .btn-circle:hover {
    opacity: 0.8;
    }
      .loading-spinner {
        display: none;
        margin-left: 10px;
      }
      .image-display {
        margin-top: 1rem;
        text-align: center;
      }
      .image-display img {
        max-width: 100%;
        border: 1px solid black;
        border-radius: 5px;
      }
    </style>
  </head>
  <body class="d-flex h-100 text-center text-white bg-white">
    <div class="container d-flex w-100 h-100 p-3 mx-auto flex-column center-content">
      <div class="username">Hello, <span id="username"><%= name %></span></div>
      <div class="form-container">
        <h1>Create Image</h1>
        <div class="card card-custom">
          <div class="card-body">
            <h5 class="card-title">Generate Image</h5>
            <p class="card-text">Enter text to generate an image.</p>
            <input type="text" id="image-text" class="form-control" placeholder="Enter text here..." />
            <button id="generate-btn" class="btn btn-primary mt-3">
              Generate
              <span class="spinner-border spinner-border-sm loading-spinner" role="status" aria-hidden="true"></span>
            </button>
          </div>
        </div>
        <div class="image-display" id="image-display" style="display: none;">
          <img id="generated-image" src="" alt="Generated Image" />
          <div class="mt-3">
            <button id="try-again-btn" class="btn btn-warning">Try Again</button>
            <button id="save-btn" class="btn btn-success">Save</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const generateBtn = document.getElementById('generate-btn');
        const loadingSpinner = document.querySelector('.loading-spinner');
        const imageDisplay = document.getElementById('image-display');
        const generatedImage = document.getElementById('generated-image');
        const tryAgainBtn = document.getElementById('try-again-btn');
        const saveBtn = document.getElementById('save-btn');
        const imageText = document.getElementById('image-text');

        generateBtn.addEventListener('click', async () => {
          const text = imageText.value.trim();
          if (!text) {
            alert('Please enter some text.');
            return;
          }

          // Show loading spinner
          loadingSpinner.style.display = 'inline-block';
          generateBtn.disabled = true;
          const host = "http://127.0.0.1:7865";

          const params = {
  prompt: text,
  async_process: true,
};

          try {

            
            // Make a POST request to the /generto endpoint
            const response = await fetch(`${host}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(params),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const result = await response.json();
    console.log(result);
  } catch (error) {
    console.error("Error in text2img:", error);
    return { error: error.message };
  } finally {
            // Hide loading spinner
            loadingSpinner.style.display = 'none';
            generateBtn.disabled = false;
          }
        });

        tryAgainBtn.addEventListener('click', () => {
          imageDisplay.style.display = 'none';
          imageText.value = '';
        });

        saveBtn.addEventListener('click', () => {
          const link = document.createElement('a');
          link.href = generatedImage.src;
          link.download = 'generated-image.png';
          link.click();
        });
      });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
  </body>
</html>
